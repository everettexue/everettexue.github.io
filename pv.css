*{box-sizing:border-box;}
html,body{margin:0;font-family:system-ui,Arial,sans-serif;width:100%;}

/* Tune these vars to match the JS gutter and rowHeight */
:root{
  --gutter: 12px;
  --row-height: 8px; /* base unit used for grid-auto-rows; JS uses same value */
}

/* CSS Grid based "tiler" that uses dense packing to avoid row holes.
   JS sets grid-template-columns and grid-auto-rows (pixel values) at runtime,
   and computes grid-row spans for each item so there are no empty spaces. */
.grid{
  width:100%;
  margin:0 auto;
  display: grid;
  grid-auto-flow: dense;        /* important: lets grid backfill holes */
  grid-auto-rows: var(--row-height);
  gap: var(--gutter);
  position: relative;           /* safe for absolutely positioned children if any */
  align-items: start;
  /* grid-template-columns will be set by JS to: repeat(cols, <px>) */
}

/* sizer element is optional now; kept for compatibility. It's not necessary
   for the CSS-Grid tiler but harmless if present. */
.grid-sizer{
  display:none;
}

/* Items use grid-placement. JS will set gridColumn and gridRowEnd inline.
   You can still use helper classes or data-col to request spans. */
.grid-item{
  box-sizing: border-box;
  padding: 6px;
  width: auto; /* width is determined by grid-column span */
}

/* Helpers â€” if you'd prefer to set spans in HTML/CSS rather than data attributes.
   These assume JS will compute --col and --gutter if you need to reference them. */
.grid-item--w2 { /* optional visual helper class */
  /* actual span is enforced by JS (gridColumn inline style); this is just a fallback */
}
.grid-item--w3 { }
.grid-item--w4 { }

/* Card / tile appearance */
.grid-item .card{
  background:#7f72ff; /* sample tile color */
  border-radius:6px;
  overflow:hidden;
  box-shadow:0 6px 18px rgba(0,0,0,0.08);
  transition: transform 200ms ease;
  display:block;
  width:100%;
}

/* If you use images inside cards, make them cover the card area.
   This helps shape tile heights predictably. */
.grid-item .card img{
  width:100%;
  height:100%;
  display:block;
  object-fit:cover;
}

/* If you want consistent tile aspect ratios you can use this helper:
   .card--square { aspect-ratio: 4 / 5; } or set min-height.
   Otherwise heights are measured at runtime by JS to compute row spans. */

.grid-item .card:hover{
  transform: translateY(-4px);
}

/* Lightbox (unchanged) */
.lightbox{
  display:none;
  position:fixed;
  z-index:999;
  left:0;
  top:0;
  width:100%;
  height:100%;
  background: rgba(0,0,0,0.9);
  justify-content:center;
  align-items:center;
}
.lightbox-content{
  max-width:90%;
  max-height:80%;
}
.lightbox .close{
  position:absolute;
  top:20px;
  right:30px;
  font-size:40px;
  color:#fff;
  cursor:pointer;
}

/* Small viewport tweaks */
@media (max-width:480px){
  :root { --gutter: 8px; --row-height: 6px; }
  .grid-item{ padding:4px; }
}
